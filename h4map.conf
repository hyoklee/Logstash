input {
    file {
        path => "/opt/local/data/*.xml"
	start_position => "beginning"
    }
}
filter {
    multiline {
    	      pattern => "^<h4:HDF4map"
	      negate => true
	      what => "previous"
    }


    xml {
        store_xml => "false"
    	source => "message"
        # target => "Parsed"
	remove_namespaces => "true"
	# add_tag => ["xml_parsed"]
	# add_field => {
	#     fileName => "%{[h4:HDF4FileInformation][h4:fileName]}"
	# }
	      # "/h4:HDF4FileInformation/h4:fileName/text()", "file_name"
	      # "/HDF4map/HDF4FileContents/[contains(., 'byteStream')]"
	xpath => [
	      "/HDF4map/HDF4FileInformation/fileName/text()", "file_name",
	      # "/HDF4map/HDF4FileContents/*[substring(name(), string-length(name()) - 4) = 'byteStream']@nBytes", "nBytes"
	      "//HDF4FileContents//chunks/byteStream/@nBytes", "nbytes",
	      "//HDF4FileContents//Array/@name", "dset_names",
	      "//HDF4FileContents//Group/@name", "group_names",
	      "//HDF4FileContents//@path", "path_names"
	      # "//byteStream@nBytes", "nbytes"
	]

    }

    
    if ([message] =~ "^<\?xml") {
       drop {}
    }

    mutate {
        convert => {"nbytes" => "integer" }
	replace => ["message", "%{file_name}"]
	remove_field => ["file_name"]

    }

#    ruby {  code => "
#           event['Parsed']['h4:byteStream'].each do |x|
#               x.each do |key, value|
#               	       x[key] = value[0]
#               end
#           end"
#    }


    # extractnumbers {
    # 	   add_tag => %{nbytes}
    # }

    
}

output {
    elasticsearch {}
    # stdout { codec => rubydebug }
    stdout { codec => json_lines 
    }
}